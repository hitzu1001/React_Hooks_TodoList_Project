{"version":3,"sources":["hooks/useLocalStorageState.js","hooks/useInputState.js","EditTodoForm.js","hooks/useToggleState.js","Todo.js","TodoList.js","TodoForm.js","TodoApp.js","hooks/useTodoState.js","App.js","serviceWorker.js","index.js"],"names":["useLocalStorageState","key","defaultVal","useState","val","JSON","parse","window","localStorage","getItem","String","e","state","setState","useEffect","setItem","stringify","initialVal","value","setValue","target","EditTodoForm","id","task","editTodo","toggleEditForm","useInputState","handleChange","reset","onSubmit","preventDefault","style","margin","width","TextField","onChange","fullWidth","autoFocus","useToggle","toggle","Todo","completed","removeTodo","toggleTodo","i","useToggleState","isEditing","toggleEdit","ListItem","backgroundColor","teal","height","Checkbox","tabIndex","checked","onClick","ListItemText","textDecoration","ListItemSecondaryAction","IconButton","aria-label","TodoList","todos","length","Paper","List","map","todo","Divider","TodoForm","addTodo","padding","label","TodoApp","initialTodos","setTodos","newTodoText","uuid","todoId","updatedTodos","filter","newTask","useTodoState","elevation","AppBar","color","position","Toolbar","Typography","Grid","container","justify","marginTop","item","xs","md","lg","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5960ed3a.chunk.js","sourcesContent":["import { useState, useEffect } from \"react\";\r\n\r\nfunction useLocalStorageState(key, defaultVal) {\r\n  const [state, setState] = useState(() => {\r\n    let val;\r\n    try {\r\n      val = JSON.parse(\r\n        window.localStorage.getItem(\"todos\") || String(defaultVal)\r\n      );\r\n    } catch (e) {\r\n      val = defaultVal;\r\n    }\r\n    return val;\r\n  });\r\n\r\n  useEffect(() => {\r\n    window.localStorage.setItem(key, JSON.stringify(state));\r\n  }, [state]);\r\n\r\n  return [state, setState];\r\n}\r\n\r\nexport default useLocalStorageState;","import { useState } from \"react\";\n\nexport default initialVal => {\n  const [value, setValue] = useState(initialVal);\n  const handleChange = e => {\n    setValue(e.target.value);\n  };\n  const reset = () => {\n    setValue(\"\");\n  };\n  return [value, handleChange, reset];\n};\n","import React from 'react';\r\nimport useInputState from './hooks/useInputState';\r\nimport TextField from \"@material-ui/core/TextField\";\r\n\r\nfunction EditTodoForm({ id, task, editTodo, toggleEditForm }) {\r\n  const [value, handleChange, reset] = useInputState(task);\r\n  return (\r\n    <form\r\n      onSubmit={e => {\r\n        e.preventDefault();\r\n        editTodo(id, value);\r\n        reset();\r\n        toggleEditForm();\r\n      }}\r\n      style={{ margin: \"1rem\", width: \"60%\" }}\r\n    >\r\n      <TextField\r\n        value={value}\r\n        onChange={handleChange}\r\n        margin=\"normal\"\r\n        fullWidth\r\n        autoFocus\r\n      />\r\n    </form>\r\n\r\n  )\r\n}\r\n\r\nexport default EditTodoForm;\r\n","import { useState } from \"react\";\n\nfunction useToggle(initialVal = false) {\n  // call useState, \"reserve piece of state\"\n  const [state, setState] = useState(initialVal);\n  const toggle = () => {\n    setState(!state);\n  };\n  // return piece of state AND a function to toggle it\n  return [state, toggle];\n}\nexport default useToggle;\n","import React from 'react';\r\nimport EditTodoForm from './EditTodoForm';\r\nimport useToggleState from './hooks/useToggleState';\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\r\nimport teal from '@material-ui/core/colors/teal';\r\n\r\nfunction Todo({ id, task, completed, removeTodo, toggleTodo, editTodo, i }) {\r\n  const [isEditing, toggleEdit] = useToggleState(false);\r\n  return (\r\n    <ListItem\r\n      style={(i % 2 === 0)\r\n        ? { backgroundColor: teal[50], height: \"64px\" }\r\n        : { height: \"64px\" }\r\n      }>\r\n      {isEditing ? (\r\n        <EditTodoForm\r\n          id={id}\r\n          task={task}\r\n          editTodo={editTodo}\r\n          toggleEditForm={toggleEdit}\r\n        />\r\n      ) : (\r\n          <>\r\n            <Checkbox\r\n              tabIndex={-1}\r\n              checked={completed}\r\n              onClick={() => toggleTodo(id)}\r\n            />\r\n            <ListItemText style={{ textDecoration: completed ? \"line-through\" : \"none\" }}>\r\n              {task}\r\n            </ListItemText>\r\n            <ListItemSecondaryAction>\r\n              <IconButton aria-label=\"Delete\" onClick={() => removeTodo(id)} >\r\n                <DeleteIcon />\r\n              </IconButton>\r\n              <IconButton aria-label=\"Edit\" onClick={toggleEdit} >\r\n                <EditIcon />\r\n              </IconButton>\r\n            </ListItemSecondaryAction>\r\n          </>\r\n        )}\r\n    </ListItem>\r\n  )\r\n}\r\n\r\nexport default Todo;\r\n","import React from 'react';\r\nimport Todo from './Todo';\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport List from \"@material-ui/core/List\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\n\r\nfunction TodoList({ todos, removeTodo, toggleTodo, editTodo }) {\r\n  if(todos.length)\r\n  return (\r\n    <Paper>\r\n      <List>\r\n        {todos.map((todo, i) => (\r\n          <>\r\n            <Todo\r\n              {...todo}\r\n              key={todo.id}\r\n              removeTodo={removeTodo}\r\n              toggleTodo={toggleTodo}\r\n              editTodo={editTodo}\r\n              i={i}\r\n            />\r\n            {(i !== todos.length - 1) && <Divider />}\r\n          </>\r\n        ))}\r\n      </List>\r\n    </Paper>\r\n  );\r\n  return null;\r\n}\r\n\r\nexport default TodoList;\r\n","import React from 'react';\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport useInputState from './hooks/useInputState';\r\n\r\nfunction TodoForm({ addTodo }) {\r\n  const [value, handleChange, reset] = useInputState(\"\");\r\n  return (\r\n    <Paper style={{ margin: \"1rem 0\", padding: \"0 1rem\" }}>\r\n      <form\r\n        onSubmit={e => {\r\n          e.preventDefault();\r\n          addTodo(value);\r\n          reset();\r\n        }}\r\n      >\r\n        <TextField \r\n          value={value} \r\n          onChange={handleChange} \r\n          margin=\"normal\"\r\n          label=\"Add New Todo\"\r\n          fullWidth\r\n        />\r\n      </form>\r\n    </Paper>\r\n  )\r\n}\r\n\r\nexport default TodoForm;\r\n\r\n","import React, { useEffect } from 'react';\r\nimport useTodoState from './hooks/useTodoState';\r\nimport TodoList from './TodoList';\r\nimport TodoForm from './TodoForm';\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport teal from '@material-ui/core/colors/teal';\r\n\r\nfunction TodoApp() {\r\n  const initialTodos = [\r\n    { id: 1, task: \"Clean Fishtank\", completed: false },\r\n    { id: 2, task: \"Wash Cat\", completed: true },\r\n    { id: 3, task: \"Grow Beard\", completed: false }\r\n  ];\r\n\r\n  const { todos, addTodo, removeTodo, toggleTodo, editTodo } = useTodoState(\r\n    initialTodos\r\n  );\r\n\r\n  return (\r\n    <Paper\r\n      style={{\r\n        padding: 0,\r\n        margin: 0,\r\n        height: \"100vh\",\r\n        backgroundColor: \"#fafafa\"\r\n      }}\r\n      elevation={0}\r\n    >\r\n      <AppBar\r\n        color='primary'\r\n        position='static'\r\n        style={{ backgroundColor: teal[500], height: \"64px\" }}\r\n      >\r\n        <Toolbar>\r\n          <Typography color='inherit'>TODOS WITH HOOKS</Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n\r\n      <Grid container justify='center' style={{ marginTop: \"1rem\" }}>\r\n        <Grid item xs={11} md={6} lg={4}>\r\n          <TodoForm addTodo={addTodo} />\r\n          <TodoList\r\n            todos={todos}\r\n            removeTodo={removeTodo}\r\n            toggleTodo={toggleTodo}\r\n            editTodo={editTodo}\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n    </Paper>\r\n  )\r\n}\r\n\r\nexport default TodoApp;\r\n\r\n\r\n\r\n// - TodoApp\r\n// \t- TodoForm\r\n// \t- TodoList\r\n// \t\t- TodoItem","import useLocalStorageState from \"./useLocalStorageState\";\nimport uuid from \"uuid/v4\";\n\nexport default initialTodos => {\n  const [todos, setTodos] = useLocalStorageState(\"todos\", initialTodos);\n  \n  return {\n    todos,\n    addTodo: newTodoText => {\n      setTodos([...todos, { id: uuid(), task: newTodoText, completed: false }]);\n    },\n    removeTodo: todoId => {\n      //filter out removed todo\n      const updatedTodos = todos.filter(todo => todo.id !== todoId);\n      //call setTodos with new todos array\n      setTodos(updatedTodos);\n    },\n    toggleTodo: todoId => {\n      const updatedTodos = todos.map(todo =>\n        todo.id === todoId ? { ...todo, completed: !todo.completed } : todo\n      );\n      setTodos(updatedTodos);\n    },\n    editTodo: (todoId, newTask) => {\n      const updatedTodos = todos.map(todo =>\n        todo.id === todoId ? { ...todo, task: newTask } : todo\n      );\n      setTodos(updatedTodos);\n    }\n  };\n};\n","import React from 'react';\nimport TodoApp from './TodoApp';\n\nfunction App() {\n  return (\n    <TodoApp />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}